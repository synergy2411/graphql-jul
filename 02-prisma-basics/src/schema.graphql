type Query {
    users(filter: String, skip: Int, take: Int, orderBy: OrderByInput): [User]
    posts: [Post]
}
input OrderByInput {
    name: TheOrder
    email: TheOrder
    createdAt: TheOrder
}
enum TheOrder {
    asc
    desc
}
type Mutation {
    createUser (data: CreateUserInput ) : User!
    updateUser(id: ID!, data: UpdateUserInput ) : User!
    deleteAll: [User]
    createPost(data: CreatePostinput ): Post!
    login(data: LoginInput): AuthPayload
}
input UpdateUserInput {
    name: String
    email: String
    password: String
}
input LoginInput{
    email: String!
    password: String!
}
type AuthPayload {
    token: String!
    user: User!
}
type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
}
type User {
    id: ID!
    name: String!
    email: String!
    password: String
    posts: [Post]
    createdAt: String
    updatedAt: String
}

input CreateUserInput {
    name: String!
    email:String!
    password: String!
}

input CreatePostinput {
    title: String!
    body: String!
    published: Boolean!
    authorId: ID!
}